{
	"info": {
		"_postman_id": "89e28448-2ac5-4dc4-8f65-181af4f9058b",
		"name": "PostgreSQL",
		"description": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29129797"
	},
	"item": [
		{
			"name": "counties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(Object.keys(jsonData[0]).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/counties",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"counties"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "countiesname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"The right values\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(jsonData[0]).to.eql(pm.variables.get(\"county\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/countiesname",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"countiesname"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "districts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(Object.keys(jsonData[0]).length).to.eql(17);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/districts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"districts"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "districtsname-",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/districtsname",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"districtsname"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "districtcountyname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Check length and values\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.eql(1);",
							"    let county = pm.variables.get(\"county\");",
							"    pm.expect(Object.keys(jsonData)[0]).to.eql(county);",
							"    pm.expect(jsonData[county].length).to.eql(1);",
							"    pm.expect(jsonData[county][0]).to.eql(pm.variables.get(\"district\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/districtcountyname",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"districtcountyname"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "districts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"});",
							"pm.test(\"The right values\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0][\"namedistrict\"]).to.eql(pm.variables.get(\"district\"));",
							"    pm.expect(jsonData[0][\"namecounty\"]).to.eql(pm.variables.get(\"county\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followOriginalHttpMethod": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"arrayID\": [\r\n        106\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/districts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"districts"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "buildingin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"The same id\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followOriginalHttpMethod": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"database\": 1,\r\n    \"isCounty\": false,\r\n    \"IDsource\": [\"Красносельский район\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/buildingin",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"buildingin"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "buildingID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"let jsonData = pm.response.json();",
							"let medObj = jsonData[0];",
							"pm.test(\"The same id\", function () {",
							"    pm.expect(medObj.buildid).to.eql(1);",
							"});",
							"pm.test(\"Other properties\", function () {",
							"    pm.expect(medObj.fullname).to.eql(\"Федеральный медицинский центр\");",
							"    pm.expect(medObj.website).to.eql(\"NaN\");",
							"    pm.expect(medObj.adress).to.eql(\"Каланчёвская улица 31\");",
							"    pm.expect(medObj.area).to.eql(902.0);",
							"    pm.expect(medObj.storey).to.eql(0);",
							"    pm.expect(medObj.idspatial).to.eql(618);",
							"    pm.expect(medObj.medtype).to.eql(\"Больница\");",
							"    pm.expect(medObj.iddistrict).to.eql(pm.variables.get(\"iddistrict\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"database\": 1,\n    \"arrayID\" : [1]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/buildingID",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"buildingID"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "buildingIDcounty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"let jsonData = pm.response.json();",
							"let medObj = jsonData[0];",
							"pm.test(\"The same id\", function () {",
							"    pm.expect(jsonData.length).to.eql(1);",
							"});",
							"pm.test(\"Other properties\", function () {",
							"    pm.expect(medObj.fullname).to.eql(\"Федеральный медицинский центр\");",
							"    pm.expect(medObj.website).to.eql(\"NaN\");",
							"    pm.expect(medObj.adress).to.eql(\"Каланчёвская улица 31\");",
							"    pm.expect(medObj.area).to.eql(902.0);",
							"    pm.expect(medObj.storey).to.eql(0);",
							"    pm.expect(medObj.idspatial).to.eql(618);",
							"    pm.expect(medObj.medtype).to.eql(\"Больница\");",
							"    pm.expect(medObj.iddistrict).to.eql(pm.variables.get(\"iddistrict\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followOriginalHttpMethod": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"database\": 1,\r\n    \"arrayID\": [\r\n        1\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/buildingIDcounty",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"buildingIDcounty"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "districtsID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(Object.keys(jsonData[0]).length).to.eql(20);",
							"});",
							"pm.test(\"The right values\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0][\"namedistrict\"]).to.eql(pm.variables.get(\"district\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"followOriginalHttpMethod": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"IDsource\":[\"relation/1257218\"]}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/districtsID",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"districtsID"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "districtsinfobyname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(Object.keys(jsonData[0]).length).to.eql(21);",
							"});",
							"pm.test(\"The right values\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0][\"namedistrict\"]).to.eql(pm.variables.get(\"district\"));",
							"    pm.expect(jsonData[0][\"iddistrict\"]).to.eql(pm.variables.get(\"iddistrict\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"IDsource\": [\"Красносельский район\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/districtsinfobyname",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"districtsinfobyname"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "countyinfobynames",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(Object.keys(jsonData[0]).length).to.eql(13);",
							"});",
							"pm.test(\"The right values\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0][\"namecounty\"]).to.eql(pm.variables.get(\"county\"));",
							"    pm.expect(jsonData[0][\"idcount\"]).to.eql(pm.variables.get(\"idcounty\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"countynames\": [\n        \"Центральный административный округ\"\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/countyinfobynames",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"countyinfobynames"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "countybydistrict",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(Object.keys(jsonData[0]).length).to.eql(12);",
							"});",
							"pm.test(\"The right values\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0][\"namecounty\"]).to.eql(pm.variables.get(\"county\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"districtID\": \"relation/1257218\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/countybydistrict",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"countybydistrict"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "countybydistrictname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"pm.test(\"The same length\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(Object.keys(jsonData[0]).length).to.eql(12);",
							"});",
							"pm.test(\"The right values\", function() {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData[0][\"namecounty\"]).to.eql(pm.variables.get(\"county\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"districtName\": \"Красносельский район\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/countybydistrictname",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"countybydistrictname"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8008"
		},
		{
			"key": "county",
			"value": "Центральный административный округ",
			"type": "string"
		},
		{
			"key": "district",
			"value": "Красносельский район",
			"type": "string"
		},
		{
			"key": "iddistrict",
			"value": "relation/1257218",
			"type": "string"
		},
		{
			"key": "idcounty",
			"value": "relation/2162196",
			"type": "string"
		}
	]
}